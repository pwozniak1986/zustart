{"version":3,"sources":["store/store.ts","components/sampler/Sampler.tsx","utils/helpers.ts","components/App.tsx","index.tsx"],"names":["create","set","items","add","item","state","move","startIndex","endIndex","splice","removed","Sampler","useStore","onAddButton","useCallback","Math","random","toString","substr","onClick","map","i","Styled","ListItem","indent","pow","styled","css","marginLeft","App","Container","color","p","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAQeA,E,MAAAA,IAAe,SAACC,GAAD,MAAU,CACpCC,MAAM,GACNC,IAAK,SAACC,GAAD,OAAUH,GAAI,SAACI,GAAD,MAAY,CAAEH,MAAM,GAAD,mBAAMG,EAAMH,OAAZ,CAAmBE,SACzDE,KAAM,SAACC,EAAYC,GAAb,OACFP,GAAI,SAACI,GACD,IAAMH,EAAK,YAAOG,EAAMH,OACxB,EAAkBA,EAAMO,OAAOF,EAAY,GAApCG,EAAP,oBAEA,OADAR,EAAMO,OAAOD,EAAU,EAAGE,GACnB,CAAER,iB,WCTN,SAASS,IACpB,IAAMT,EAAQU,GAAS,SAAAP,GAAK,OAAIA,EAAMH,SAChCC,EAAMS,GAAS,SAAAP,GAAK,OAAIA,EAAMF,OAE9BU,EAAcC,uBAAY,WAC5BX,ECTGY,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,MDUzC,IAEH,OACI,qCACI,wBAAQC,QAASN,EAAjB,iBACA,6BACCX,EAAMkB,KAAI,SAAChB,EAAMiB,GAAP,OACP,cAACC,EAAOC,SAAR,CAAsCC,OAAQT,KAAKU,IAAI,EAAEJ,EAAE,GAA3D,SACKjB,GADL,UAAyBA,EAAzB,YAAiCiB,YASjD,IAAMC,EAAS,CACXC,SAAUG,YAAO,KAAPA,EAAa,gBAAEF,EAAF,EAAEA,OAAF,OAA8BG,YAAI,CACrDC,WAAYJ,EAAO,WE1BZ,SAASK,IACpB,OACI,eAAC,EAAOC,UAAR,WACI,kDACA,cAACnB,EAAD,OAKZ,IAAMW,EAAS,CACXQ,UAAWJ,YAAO,MAAPA,CAAcC,YAAI,CACzBI,MAAM,CAAC,OAAQ,SACfC,EAAE,WCXVC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACN,EAAD,MAEFO,SAASC,eAAe,W","file":"static/js/main.1a7d6de7.chunk.js","sourcesContent":["import create from 'zustand'\n\ntype TStore = {\n\titems: string[];\n\tadd: (item: string) => void;\n\tmove: (startIndex: number, endIndex: number) => void;\n};\n\nexport default create<TStore>((set) => ({\n    items:[],\n    add: (item) => set((state) => ({ items: [...state.items, item]})),\n    move: (startIndex, endIndex) =>\n        set((state) => {\n            const items = [...state.items];\n            const [removed] = items.splice(startIndex, 1);\n            items.splice(endIndex, 0, removed);\n            return { items };\n        }),\n}))","import styled from '@emotion/styled'\nimport useStore from '../../store/store'\nimport { getRandomText } from 'utils/helpers'\nimport { useCallback } from 'react'\nimport {css} from '@styled-system/css'\n\n\nexport default function Sampler(){\n    const items = useStore(state => state.items)\n    const add = useStore(state => state.add)\n\n    const onAddButton = useCallback(() => {\n        add(getRandomText())\n    }, [])\n\n    return(\n        <>\n            <button onClick={onAddButton}>add</button>\n            <ul>\n            {items.map((item, i) => \n                <Styled.ListItem key={`${item}-${i}`} indent={Math.pow(2,i/3)}>\n                    {item}\n                </Styled.ListItem>\n            )}\n            </ul>\n        </>\n    )\n}\n\nconst Styled = {\n    ListItem: styled('li')(({indent}:{indent:number}) => css({\n        marginLeft: indent+'px'\n    })),\n}\n","\n\nexport function getRandomText(){\n    return Math.random().toString(36).substr(2, 5);\n}\n","import styled from '@emotion/styled'\nimport {css} from '@styled-system/css'\nimport SamplerStore from 'components/sampler/Sampler'\n\n\nexport default function App(){\n    return(\n        <Styled.Container>\n            <h1>This is ZUSTART!</h1>\n            <SamplerStore/>\n        </Styled.Container>\n    )\n}\n\nconst Styled = {\n    Container: styled('div')(css({\n        color:['pink', 'green'],\n        p:'12px'\n    }))\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './global.css';\nimport App from './components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}